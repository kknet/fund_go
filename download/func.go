package download

type AutoGenerated struct {
	Data struct {
		Diff []Stock `json:"diff"`
	} `json:"data"`
}

type Stock struct {
	// 字段对齐 可减少内存占用
	Code       string `json:"f12"`
	Name       string `json:"f14"`
	MarketType string `bson:"marketType"`
	Type       string
	Cid        string `bson:"cid"`

	C    int     `json:"f13" bson:""`
	Vol  float64 `json:"f5"`
	Buy  float64 `json:"f34" bson:""`
	Sell float64 `json:"f35" bson:""`

	PctChg   float64 `bson:"pct_chg"`
	Amp      float64
	Price    float64 `json:"f2"`
	Amount   float64 `json:"f6"`
	Vr       float64 `json:"f10"`
	Pct5Min  float64 `json:"f11" bson:"pct5min"`
	High     float64 `json:"f15"`
	Low      float64 `json:"f16"`
	Open     float64 `json:"f17"`
	Close    float64 `json:"f18"`
	PctRate  float64 `json:"f22" bson:"pct_rate"`
	Pb       float64 `json:"f23"`
	Pct60Day float64 `json:"f24" bson:"pct60day"`
	PctYear  float64 `json:"f25" bson:"pct_year"`
	Wb       float64 `json:"f33"`
	Roe      float64 `json:"f37"`

	TotalShare float64 `json:"f38" bson:"total_share"`
	FloatShare float64 `json:"f39" bson:"float_share"`
	Mc         float64
	Fmc        float64
	Tr         float64

	MainNet   float64 `bson:"main_net"`
	Net       float64
	MainIn    float64 `bson:"main_in"`
	MainOut   float64 `bson:"main_out"`
	MainHuge  float64 `json:"f66" bson:"main_huge"`
	MainBig   float64 `json:"f72" bson:"main_big"`
	MainMid   float64 `json:"f78" bson:"main_mid"`
	MainSmall float64 `json:"f84" bson:"main_small"`
	PeTtm     float64 `json:"f115" bson:"pe_ttm"`
	MainPct   float64 `json:"f184" bson:"main_pct"`
}

// Expression 自定义三元表达式
func Expression(b bool, true interface{}, false interface{}) interface{} {
	if b {
		return true
	} else {
		return false
	}
}

// SetCol 创建新列
//func (df DataFrame) SetCol(colName string, value interface{}) DataFrame {
//	s, ok := value.(series.Series)
//	if ok {
//		return df.Mutate(series.New(s, s.Type(), colName))
//	}
//
//	array := make([]interface{}, df.Nrow())
//	for i := range array {
//		array[i] = value
//	}
//
//	_, ok = value.(string)
//	if ok {
//		return df.Mutate(series.New(array, series.String, colName))
//	}
//	_, ok = value.(float64)
//	if ok {
//		return df.Mutate(series.New(array, series.Float, colName))
//	}
//	_, ok = value.(int)
//	if ok {
//		return df.Mutate(series.New(array, series.Int, colName))
//	}
//	return df
//}

// RenameDic 重命名
//func (df DataFrame) RenameDic(namesMap map[string]string) DataFrame {
//	for key, value := range namesMap {
//		df = df.Rename(value, key)
//	}
//	return df
//}
