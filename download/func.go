package download

type AutoGenerated struct {
	Data struct {
		Diff []struct {
			// 字段对齐 可减少内存占用
			F12  string  `json:"f12"`
			F14  string  `json:"f14"`
			F5   int     `json:"f5"`
			F13  int     `json:"f13"`
			F34  int     `json:"f34"`
			F35  int     `json:"f35"`
			F2   float64 `json:"f2"`
			F6   float64 `json:"f6"`
			F10  float64 `json:"f10"`
			F11  float64 `json:"f11"`
			F15  float64 `json:"f15"`
			F16  float64 `json:"f16"`
			F17  float64 `json:"f17"`
			F18  float64 `json:"f18"`
			F22  float64 `json:"f22"`
			F23  float64 `json:"f23"`
			F24  float64 `json:"f24"`
			F25  float64 `json:"f25"`
			F33  float64 `json:"f33"`
			F37  float64 `json:"f37"`
			F38  float64 `json:"f38"`
			F39  float64 `json:"f39"`
			F66  float64 `json:"f66"`
			F72  float64 `json:"f72"`
			F78  float64 `json:"f78"`
			F84  float64 `json:"f84"`
			F115 float64 `json:"f115"`
			F184 float64 `json:"f184"`
		} `json:"diff"`
	} `json:"data"`
}

// Expression 自定义三元表达式
func Expression(b bool, true interface{}, false interface{}) interface{} {
	if b {
		return true
	} else {
		return false
	}
}

// SetCol 创建新列
//func (df DataFrame) SetCol(colName string, value interface{}) DataFrame {
//	s, ok := value.(series.Series)
//	if ok {
//		return df.Mutate(series.New(s, s.Type(), colName))
//	}
//
//	array := make([]interface{}, df.Nrow())
//	for i := range array {
//		array[i] = value
//	}
//
//	_, ok = value.(string)
//	if ok {
//		return df.Mutate(series.New(array, series.String, colName))
//	}
//	_, ok = value.(float64)
//	if ok {
//		return df.Mutate(series.New(array, series.Float, colName))
//	}
//	_, ok = value.(int)
//	if ok {
//		return df.Mutate(series.New(array, series.Int, colName))
//	}
//	return df
//}

// RenameDic 重命名
//func (df DataFrame) RenameDic(namesMap map[string]string) DataFrame {
//	for key, value := range namesMap {
//		df = df.Rename(value, key)
//	}
//	return df
//}
